version: "3"

services:
  postgres:
    restart: always
    image: postgres:15.2
    # command: ["postgres", "-c", "log_statement=${POSTGRES_LOG_LEVEL}"]
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASS
      POSTGRES_HOST: $DB_HOST
      POSTGRES_PORT: $DB_PORT
    volumes:
      - ./postgres-data:/var/lib/postgresql/data

  redis:
    restart: unless-stopped
    image: redis:7.2-alpine
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASS}
    volumes:
      - ./redis-data:/data

  backend:
    restart: unless-stopped
    build:
      context: .
      dockerfile: config/backend.Dockerfile
    depends_on:
      - redis
      - postgres
    volumes:
      - ./backend:/backend
      - static_volume:/backend/static_root
    env_file:
      - .env

  celery:
    restart: unless-stopped
    build:
      context: .
      dockerfile: config/backend.Dockerfile
    command: "celery -A api.asgi.celery worker -l INFO"
    volumes:
      - ./backend:/backend
    depends_on:
      - postgres
      - redis
    env_file:
      - .env

  celery-beat:
    restart: unless-stopped
    build:
      context: .
      dockerfile: config/backend.Dockerfile
    command: "celery -A api.asgi.celery beat -S redbeat.RedBeatScheduler --max-interval 30 -l INFO"
    volumes:
      - ./backend:/backend
    depends_on:
      - postgres
      - redis
    env_file:
      - .env

  frontend:
    restart: unless-stopped
    build:
      context: .
      dockerfile: config/${FRONTEND_DF}
    container_name: stats_frontend
    depends_on:
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.services.frontend.loadbalancer.server.port=4200
      - traefik.http.routers.frontend.rule=Host(`${TRAEFIK_HOST}`)
      - traefik.http.routers.frontend.entrypoints=web
    networks:
      - traefik_proxy
      - default

  proxy:
    image: "traefik:v3.0"
    container_name: "proxy"
    env_file: .env
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - traefik_proxy
    volumes:
      - "./config/traefik.dev.yaml:/etc/traefik/traefik.yaml"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

volumes:
  static_volume:
  postgres-data:
  redis-data:

networks:
  traefik_proxy:
